{"version":3,"sources":["hooks/useFade.ts","components/BoucingText.tsx","components/tailwind/hoc.tsx","components/tailwind/index.ts","navigation/LinkingConfiguration.ts","components/SharedBackgound.tsx","components/SharedTitle.tsx","components/HomeScreenButton.tsx","constants/Colors.ts","screens/HomeScreen.tsx","components/CustomButton.tsx","components/BottomButtons.tsx","components/FinishedText.tsx","components/Header.tsx","components/ScreenWrapper.tsx","components/TimeText.tsx","utils/time.ts","constants/FadeDuration.ts","hooks/useTimer.ts","screens/ClassicTimerScreen.tsx","hooks/useClassicTimer.ts","screens/StopwatchScreen.tsx","hooks/useStopwatch.ts","hooks/useHiitTimer.ts","components/TimerWithRoundsLowerPart.tsx","components/TimerWithRoundsUpperPart.tsx","components/TimerWithRounds.tsx","components/RoundsSettings.tsx","screens/HiitTimerScreen.tsx","hooks/useTabataTimer.ts","screens/TabataTimerScreen.tsx","navigation/index.tsx","App.tsx","hooks/useCachedResources.ts","constants/FontInter.ts","components/FadedView.tsx","hooks/useUpdateEffect.ts"],"names":["useFade","initialValue","fadeDuration","fadeOutDuration","fadeAnim","useRef","Animated","Value","current","fadeIn","callback","timing","toValue","duration","useNativeDriver","start","setTimeout","fadeOut","BouncingText","text","children","visible","offset","useSharedValue","style","useAnimatedStyle","transform","translateY","value","useEffect","withRepeat","withTiming","easing","Easing","linear","cancelAnimation","windowHeight","useWindowDimensions","height","position","bottom","View","className","fontFamily","FontInter","semiBold","textAlign","withTailwind","WrappedComponent","ComponentWithTailwind","props","otherProps","tailwind","displayName","name","RN","Text","TouchableOpacity","TouchableHighlight","FadedView","FV","linking","prefixes","Linking","config","screens","Home","Stopwatch","ClassicTimer","TabataTimer","HiitTimer","SharedBackground","title","backgroundColor","SharedElement","id","StyleSheet","absoluteFillObject","SharedTitle","HomeScreenButton","onPress","HomeScreen","navigation","flex","flexDirection","flexWrap","Colors","navigate","CustomButton","windowWidth","width","BottomButtons","isActive","isPaused","isFinished","handleReset","handleStart","handlePause","handleResume","insetsBottom","Platform","OS","useSafeAreaInsets","marginBottom","FinishedText","fontSize","Header","insetsTop","top","left","right","zIndex","opacity","Ionicons","size","color","ScreenWrapper","SafeAreaView","edges","TimeText","timer","big","timerString","hoursActive","getSeconds","slice","minutes","Math","floor","getMinutes","hours","getHours","formatTime","textViews","x","c","charAt","push","key","useTimer","initialState","useState","setTimer","setIsActive","setIsPaused","setIsFinished","timerRef","timerInterval","setInterval","handleFinish","handleClear","clearInterval","ClassicTimerScreen","upTimer","eps","t","downTimer","useClassicTimer","throttle","handleScroll","e","sign","deltaY","abs","window","addEventListener","removeEventListener","StopwatchScreen","countRef","useStopwatch","useHiitTimer","restTime","setRestTime","workTime","setWorkTime","numberRounds","setNumberRounds","roundTime","setRoundTime","totalTime","setTotalTime","superReset","round","setRound","isRest","setIsRest","TimerWithRoundsLowerPart","TimerWithRoundsUpperPart","FadeDuration","TimerWithRounds","alignItems","RoundsSettings","onValueChange","maximumValue","minimumValue","step","HiitTimerScreen","isActiveRef","isSettingsShown","setIsSettingsShown","panResponder","PanResponder","create","onStartShouldSetPanResponder","onPanResponderRelease","event","gestureState","dx","dy","v","panHandlers","useTabataTimer","TabataTimerScreen","Navigation","NavigationContainer","LinkingConfiguration","RootNavigator","Stack","createSharedElementStackNavigator","options","gestureEnabled","transitionSpec","open","animation","inOut","ease","close","cardStyleInterpolator","cardStyle","progress","Navigator","initialRouteName","screenOptions","headerShown","Screen","component","sharedElements","route","otherRoute","showing","App","isLoadingComplete","setLoadingComplete","SplashScreen","useFonts","Inter_900Black","Inter_600SemiBold","fontsLoaded","error","console","warn","useCachedResources","StatusBar","thin","extraLight","light","regular","medium","bold","extraBold","black","showView","setShowView","timeoutRef","effect","deps","isInitialMount","useUpdateEffect","stopAnimation","clearTimeout"],"mappings":"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","file":"static/js/app.4b74afcd.chunk.js","sourcesContent":["import { useRef } from \"react\";\nimport { Animated } from \"react-native\";\n\nexport default function useFade(initialValue: number, fadeDuration: number, fadeOutDuration?: number) {\n    const fadeAnim = useRef(new Animated.Value(initialValue)).current;\n\n    const fadeIn = (callback?: () => void) => {\n        Animated.timing(fadeAnim, {\n            toValue: 1,\n            duration: fadeDuration,\n            useNativeDriver: false,\n        }).start();\n        if (callback)\n            setTimeout(callback, fadeOutDuration ?? fadeDuration);\n    };\n\n    const fadeOut = (callback?: () => void) => {\n        Animated.timing(fadeAnim, {\n            toValue: 0,\n            duration: fadeOutDuration ?? fadeDuration,\n            useNativeDriver: false,\n        }).start();\n        if (callback)\n            setTimeout(callback, fadeOutDuration ?? fadeDuration);\n    };\n\n    return { fadeAnim, fadeIn, fadeOut }\n}","import React, { useEffect } from \"react\";\nimport { useWindowDimensions } from \"react-native\";\nimport Animated, {\n  cancelAnimation,\n  Easing,\n  useAnimatedStyle,\n  useSharedValue,\n  withRepeat,\n  withTiming,\n} from \"react-native-reanimated\";\nimport FontInter from \"../constants/FontInter\";\nimport FadedView from \"./FadedView\";\nimport { Text } from \"./tailwind\";\n\nexport default function BouncingText({\n  children: text,\n  visible,\n  fadeDuration,\n}: {\n  children: string;\n  visible: boolean;\n  fadeDuration: number;\n}) {\n  const duration = 1000;\n\n  const offset = useSharedValue(-8);\n\n  const style = useAnimatedStyle(() => {\n    return {\n      transform: [{ translateY: offset.value }],\n    };\n  });\n\n  useEffect(() => {\n    offset.value = withRepeat(\n      withTiming(8, {\n        duration: duration,\n        easing: Easing.linear,\n      }),\n      -1,\n      true\n    );\n    return () => {\n      cancelAnimation(offset);\n    };\n  }, []);\n\n  const { height: windowHeight } = useWindowDimensions();\n  return (\n    <FadedView\n      visible={visible}\n      fadeDuration={fadeDuration}\n      style={{\n        position: \"absolute\",\n        bottom: windowHeight / 8,\n      }}\n    >\n      <Animated.View style={[style]}>\n        <Text\n          className=\"text-white text-2xl\"\n          style={{\n            fontFamily: FontInter.semiBold,\n            textAlign: \"center\",\n          }}\n        >\n          {text}\n        </Text>\n      </Animated.View>\n    </FadedView>\n  );\n}\n","import * as React from \"react\";\nimport * as RN from \"react-native\";\nimport tailwind from \"tailwind-rn\";\n\ninterface WithTailwindProps {\n  className?: string;\n  children?: React.ReactNode;\n}\n\ninterface StyleProps {\n  style?: RN.StyleProp<any>;\n}\n\nexport function withTailwind<T extends StyleProps>(\n  WrappedComponent: React.ComponentType<T>\n) {\n  const ComponentWithTailwind = (props: T & WithTailwindProps) => {\n    const { className, style, ...otherProps } = props;\n    // props comes afterwards so the can override the default ones.\n    return (\n      <WrappedComponent\n        //applying style with override tailwind\n        style={[tailwind(className ?? \"\"), style]}\n        {...(otherProps as T)}\n      />\n    );\n  };\n\n  // Try to create a nice displayName for React Dev Tools.\n  const displayName =\n    WrappedComponent.displayName || WrappedComponent.name || \"Component\";\n  ComponentWithTailwind.displayName = `withTailwind(${displayName})`;\n\n  return ComponentWithTailwind;\n}\n","import * as RN from \"react-native\";\nimport { withTailwind } from \"./hoc\";\nimport FV from \"../FadedView\";\n\nexport const View = withTailwind(RN.View);\nexport const Text = withTailwind(RN.Text);\nexport const TouchableOpacity = withTailwind(RN.TouchableOpacity);\nexport const TouchableHighlight = withTailwind(RN.TouchableHighlight);\nexport const TextInput = withTailwind(RN.TextInput)\nexport const Image = withTailwind(RN.Image)\nexport const FadedView = withTailwind(FV)","/**\n * Learn more about deep linking with React Navigation\n * https://reactnavigation.org/docs/deep-linking\n * https://reactnavigation.org/docs/configuring-links\n */\n\nimport { LinkingOptions } from '@react-navigation/native';\nimport * as Linking from 'expo-linking';\n\nimport { RootStackParamList } from '../types';\n\nconst linking: LinkingOptions<RootStackParamList> = {\n  prefixes: [Linking.makeUrl('/')],\n  config: {\n    screens: {\n      Home: '/',\n      Stopwatch: 'stopwatch',\n      ClassicTimer: 'classic-timer',\n      TabataTimer: 'tabata-timer',\n      HiitTimer: 'hiit-timer',\n    },\n  },\n};\n\nexport default linking;\n","import React from \"react\";\nimport { ColorValue, StyleSheet } from \"react-native\";\nimport { SharedElement } from \"react-navigation-shared-element\";\nimport { View } from \"./tailwind\";\n\nexport default function SharedBackground({\n  title,\n  backgroundColor,\n}: {\n  title: string;\n  backgroundColor: ColorValue;\n}) {\n  return (\n    <SharedElement\n      id={`${title}.background`}\n      style={[StyleSheet.absoluteFillObject]}\n    >\n      <View\n        style={[\n          StyleSheet.absoluteFillObject,\n          {\n            backgroundColor,\n          },\n        ]}\n      />\n    </SharedElement>\n  );\n}\n","import React from \"react\";\nimport { SharedElement } from \"react-navigation-shared-element\";\nimport FontInter from \"../constants/FontInter\";\nimport { Text } from \"./tailwind\";\n\nexport default function SharedTitle({ title }: { title: string }) {\n  return (\n    <SharedElement id={title}>\n      <Text\n        className=\"text-white text-center text-2xl\"\n        style={{\n          fontFamily: FontInter.semiBold,\n        }}\n      >\n        {title}\n      </Text>\n    </SharedElement>\n  );\n}\n","import React from \"react\";\nimport { TouchableHighlight, View } from \"./tailwind\";\nimport { ColorValue } from \"react-native\";\nimport SharedBackground from \"./SharedBackgound\";\nimport SharedTitle from \"./SharedTitle\";\n\nexport default function HomeScreenButton({\n  backgroundColor,\n  title,\n  onPress,\n}: {\n  backgroundColor: ColorValue;\n  title: string;\n  onPress: () => void;\n}) {\n  return (\n    <TouchableHighlight className=\"w-1/2 h-1/2\" onPress={onPress}>\n      <View className=\"flex-1 items-center justify-center\">\n        <SharedBackground title={title} backgroundColor={backgroundColor} />\n        <SharedTitle title={title} />\n      </View>\n    </TouchableHighlight>\n  );\n}\n","export default {\n  stopwatch: \"#38BDF8\",\n  classicTimer: \"#34D399\",\n  tabataTimer: \"#F472B6\",\n  hiitTimer: \"#FB923C\"\n};\n","import React from \"react\";\nimport { View } from \"react-native\";\nimport HomeScreenButton from \"../components/HomeScreenButton\";\nimport Colors from \"../constants/Colors\";\nimport { RootStackScreenProps } from \"../types\";\n\nexport default function HomeScreen({\n  navigation,\n}: RootStackScreenProps<\"Home\">) {\n  return (\n    <View\n      style={{\n        flex: 1,\n        flexDirection: \"row\",\n        flexWrap: \"wrap\",\n      }}\n    >\n      <HomeScreenButton\n        title=\"Stopwatch\"\n        backgroundColor={Colors.stopwatch}\n        onPress={() => {\n          navigation.navigate(\"Stopwatch\");\n        }}\n      />\n\n      <HomeScreenButton\n        title=\"Classic Timer\"\n        backgroundColor={Colors.classicTimer}\n        onPress={() => {\n          navigation.navigate(\"ClassicTimer\");\n        }}\n      />\n      <HomeScreenButton\n        title=\"Tabata Timer\"\n        backgroundColor={Colors.tabataTimer}\n        onPress={() => {\n          navigation.navigate(\"TabataTimer\");\n        }}\n      />\n      <HomeScreenButton\n        title=\"HIIT Timer\"\n        backgroundColor={Colors.hiitTimer}\n        onPress={() => {\n          navigation.navigate(\"HiitTimer\");\n        }}\n      />\n    </View>\n  );\n}\n","import React from \"react\";\nimport { StyleProp, useWindowDimensions, ViewStyle } from \"react-native\";\nimport FontInter from \"../constants/FontInter\";\nimport { Text, TouchableOpacity } from \"./tailwind\";\n\nexport default function CustomButton({\n  title,\n  onPress,\n  style,\n}: {\n  title: string;\n  onPress: () => void;\n  style?: StyleProp<ViewStyle>;\n}) {\n  const { width: windowWidth } = useWindowDimensions();\n  return (\n    <TouchableOpacity\n      className=\"bg-white rounded-xl items-center py-2 max-w-xl\"\n      style={[{ width: windowWidth * 0.8 }, style]}\n      onPress={onPress}\n    >\n      <Text\n        className=\"text-gray-900 text-2xl\"\n        style={{ fontFamily: FontInter.semiBold }}\n      >\n        {title}\n      </Text>\n    </TouchableOpacity>\n  );\n}\n","import React from \"react\";\nimport { Platform, View } from \"react-native\";\nimport { useSafeAreaInsets } from \"react-native-safe-area-context\";\nimport CustomButton from \"./CustomButton\";\nimport FadedView from \"./FadedView\";\n\nexport default function BottomButtons({\n  isActive,\n  isPaused,\n  isFinished,\n  handleReset,\n  handleStart,\n  handlePause,\n  handleResume,\n}: {\n  isActive: boolean;\n  isPaused: boolean;\n  isFinished?: boolean;\n  handleReset: () => void;\n  handleStart: () => void;\n  handlePause: () => void;\n  handleResume: () => void;\n}) {\n  const insetsBottom = Platform.OS === \"ios\" || Platform.OS === \"android\" ? useSafeAreaInsets().bottom : 20;\n  return (\n    <View\n      style={{\n        position: \"absolute\",\n        bottom: insetsBottom,\n      }}\n    >\n      <FadedView\n        visible={isActive && isPaused}\n        fadeDuration={400}\n        fadeOutDuration={0}\n        initialValue={0}\n      >\n        <CustomButton\n          title=\"Reset\"\n          onPress={handleReset}\n          style={{ marginBottom: insetsBottom / 2 }}\n        />\n      </FadedView>\n      {!!isFinished ? (\n        <CustomButton title=\"Reset\" onPress={handleReset} />\n      ) : !isActive ? (\n        <CustomButton title=\"Start\" onPress={handleStart} />\n      ) : !isPaused ? (\n        <CustomButton title=\"Stop\" onPress={handlePause} />\n      ) : (\n        <CustomButton title=\"Resume\" onPress={handleResume} />\n      )}\n    </View>\n  );\n}\n","import React from \"react\";\nimport { useWindowDimensions } from \"react-native\";\nimport FontInter from \"../constants/FontInter\";\nimport FadedView from \"./FadedView\";\nimport { Text } from \"./tailwind\";\n\nexport default function FinishedText({\n  visible,\n  fadeDuration,\n}: {\n  visible: boolean;\n  fadeDuration: number;\n}) {\n  const { width: windowWidth } = useWindowDimensions();\n  return (\n    <FadedView\n      visible={visible}\n      fadeDuration={fadeDuration}\n      style={{\n        position: \"absolute\",\n      }}\n      initialValue={0}\n    >\n      <Text\n        className=\"text-white\"\n        style={{\n          fontFamily: FontInter.semiBold,\n          fontSize: windowWidth * 0.1,\n        }}\n      >\n        FINISHED\n      </Text>\n    </FadedView>\n  );\n}\n","import React from \"react\";\nimport { View } from \"./tailwind\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { useSafeAreaInsets } from \"react-native-safe-area-context\";\nimport { Animated } from \"react-native\";\nimport SharedTitle from \"./SharedTitle\";\n\nexport default function Header({\n  title,\n  onPress,\n  fadeAnim,\n}: {\n  title: string;\n  onPress: () => void;\n  fadeAnim: Animated.Value;\n}) {\n  const iconWidth = 40;\n  const { top: insetsTop } = useSafeAreaInsets();\n  return (\n    <View\n      className=\"flex-row items-center justify-center m-4\"\n      style={{\n        position: \"absolute\",\n        top: insetsTop,\n        left: 0,\n        right: 0,\n        zIndex: 1,\n      }}\n    >\n      <Animated.View\n        style={{ opacity: fadeAnim, position: \"absolute\", left: 0 }}\n      >\n        <Ionicons\n          name=\"arrow-back-circle\"\n          size={iconWidth}\n          color=\"white\"\n          onPress={onPress}\n        />\n      </Animated.View>\n      <SharedTitle title={title} />\n    </View>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport Header from \"./Header\";\nimport { Animated, ColorValue } from \"react-native\";\nimport { SafeAreaView } from \"react-native-safe-area-context\";\nimport SharedBackground from \"./SharedBackgound\";\nimport useFade from \"../hooks/useFade\";\n\nexport default function ScreenWrapper({\n  title,\n  onPress,\n  children,\n  backgroundColor,\n}: {\n  title: string;\n  onPress: () => void;\n  backgroundColor: ColorValue;\n  children?: React.ReactNode;\n}) {\n  const fadeInDuration = 400;\n  const fadeOutDuration = 80;\n  const { fadeAnim, fadeIn, fadeOut } = useFade(\n    0,\n    fadeInDuration,\n    fadeOutDuration\n  );\n\n  useEffect(() => {\n    setTimeout(() => {\n      fadeIn();\n    }, fadeInDuration);\n  }, []);\n  return (\n    <SafeAreaView edges={[\"bottom\", \"left\", \"right\"]} style={{ flex: 1 }}>\n      <SharedBackground title={title} backgroundColor={backgroundColor} />\n      <Header\n        title={title}\n        onPress={() => {\n          fadeOut();\n          setTimeout(() => {\n            onPress();\n          }, fadeOutDuration);\n        }}\n        fadeAnim={fadeAnim}\n      />\n      <Animated.View style={{ flex: 1, opacity: fadeAnim }}>\n        {children}\n      </Animated.View>\n    </SafeAreaView>\n  );\n}\n","import React from \"react\";\nimport { View, Text } from \"./tailwind\";\nimport FontInter from \"../constants/FontInter\";\nimport { formatTime } from \"../utils/time\";\nimport { useWindowDimensions } from \"react-native\";\n\nexport default function TimeText({\n  children: timer,\n  big = false,\n}: {\n  children: number;\n  big?: boolean;\n}) {\n  const { width: windowWidth } = useWindowDimensions();\n  const fontSize = big ? windowWidth * 0.2 : 20;\n  const width = fontSize * 0.65;\n  const timerString = formatTime(timer, false);\n\n  const textViews = [];\n\n  for (var x = 0, c = \"\"; (c = timerString.charAt(x)); x++) {\n    if (c !== \" \")\n      textViews.push(\n        <Text\n          key={x}\n          className=\"text-white text-center\"\n          style={{\n            fontFamily: FontInter.semiBold,\n            fontSize: fontSize,\n            width: width,\n            textAlign: \"center\",\n          }}\n        >\n          {c}\n        </Text>\n      );\n  }\n\n  return <View className=\"flex-row\">{textViews}</View>;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n * @generate-docs\n */\n\nexport const formatTime = (timer: number, hoursActive = true) => {\n    const getSeconds = `0${(timer % 60)}`.slice(-2)\n    const minutes = Math.floor(timer / 60)\n    const getMinutes = `0${minutes % 60}`.slice(-2)\n    const hours = Math.floor(timer / 3600)\n\n    if (hoursActive && hours) {\n        const getHours = `0${hours}`.slice(-2)\n        return `${getHours} : ${getMinutes} : ${getSeconds}`\n    }\n\n    return `${getMinutes} : ${getSeconds}`\n}\n\nexport const formatTimeNumber = (timer: number) => {\n    const seconds = timer % 100;\n    const getSeconds = `0${seconds}`.slice(-2)\n    const minutes = Math.floor(timer / 100)\n    const getMinutes = `0${minutes}`.slice(-2)\n\n    return `${getMinutes} : ${getSeconds}`\n}\n\nexport const reformatTimeNumber = (timer: number) => {\n    const seconds = timer % 100;\n    const reelSeconds = seconds % 60;\n    const minutes = Math.floor(timer / 100) + Math.floor(seconds / 60);\n    const reelMinutes = minutes > 60 ? 60 : minutes;\n    if (timer >= 6000)\n        return 6000;\n    const reelNumber = Number(`${reelMinutes}${reelSeconds}`);\n\n    return reelNumber;\n}\n\nexport const formatTimeString = (timer: string) => {\n    const getSeconds = timer.slice(0, 2)\n    const getMinutes = timer.slice(2)\n\n    return `${getMinutes} : ${getSeconds}`\n}","export default 600;","import { useState, useRef, useEffect } from 'react';\n\nexport default function useTimer(initialState: number) {\n    const [timer, setTimer] = useState(initialState)\n    const [isActive, setIsActive] = useState(false)\n    const [isPaused, setIsPaused] = useState(false)\n    const [isFinished, setIsFinished] = useState(false)\n    const timerRef = useRef<NodeJS.Timer | null>(null)\n    const timerInterval = () => setInterval(() => {\n        setTimer((timer) => timer - 1 > 0 ? timer - 1 : 0)\n    }, 1000)\n\n    const handleStart = () => {\n        setIsActive(true)\n        timerRef.current = timerInterval()\n    }\n\n    const handlePause = () => {\n        handleClear()\n        setIsPaused(true)\n    }\n\n    const handleResume = () => {\n        setIsPaused(false)\n        timerRef.current = timerInterval()\n    }\n\n    const handleReset = () => {\n        handleClear()\n        setIsActive(false)\n        setIsPaused(false)\n        setIsFinished(false);\n        setTimer(initialState)\n    }\n\n    const handleFinish = () => {\n        handleClear();\n        setIsFinished(true);\n    }\n\n    const handleClear = () => {\n        if (timerRef.current) clearInterval(timerRef.current)\n    }\n\n    useEffect(() => {\n        if (isActive && timer == 0)\n            handleFinish();\n    }, [timer]);\n\n    useEffect(() => {\n        // Prevents from memory leaks by stopping the 1 second interval\n        return () => {\n            handleClear();\n        };\n    }, []);\n\n    return {\n        timer, setTimer,\n        isActive, isPaused, isFinished,\n        handleStart, handlePause, handleResume, handleReset, handleFinish\n    }\n}","import React, { useEffect } from \"react\";\nimport BottomButtons from \"../components/BottomButtons\";\nimport BouncingText from \"../components/BoucingText\";\nimport FadedView from \"../components/FadedView\";\nimport FinishedText from \"../components/FinishedText\";\nimport ScreenWrapper from \"../components/ScreenWrapper\";\nimport { View } from \"../components/tailwind\";\nimport TimeText from \"../components/TimeText\";\nimport Colors from \"../constants/Colors\";\nimport FadeDuration from \"../constants/FadeDuration\";\nimport useClassicTimer from \"../hooks/useClassicTimer\";\nimport { RootStackScreenProps } from \"../types\";\n\nexport default function ClassicTimerScreen({\n  navigation,\n}: RootStackScreenProps<\"ClassicTimer\">) {\n  const {\n    timer,\n    isActive,\n    isPaused,\n    isFinished,\n    handleStart,\n    handlePause,\n    handleResume,\n    handleReset,\n    upTimer,\n    downTimer,\n  } = useClassicTimer(1800);\n\n  var throttle: NodeJS.Timer | null = null;\n  const throttleDuration = 80;\n\n  const handleScroll = (e: WheelEvent) => {\n    if (!throttle) {\n      const sign = Math.sign(e.deltaY);\n      const eps =\n        Math.abs(Math.floor(e.deltaY)) < 10 ? sign : Math.floor(e.deltaY);\n      if (sign == 1) upTimer(eps);\n      if (sign == -1) downTimer(eps);\n      /* Add: Start a \"throttle\" timer that prevents next wheel processing\n      until timer completed */\n      throttle = setTimeout(() => {\n        throttle = null;\n      }, throttleDuration);\n    }\n  };\n\n  useEffect(() => {\n    if (!isActive && !isPaused) {\n      window.addEventListener(\"wheel\", handleScroll);\n      return () => {\n        window.removeEventListener(\"wheel\", handleScroll);\n      };\n    }\n  }, [isActive, isPaused]);\n\n  return (\n    <ScreenWrapper\n      title=\"Classic Timer\"\n      onPress={() => navigation.navigate(\"Home\")}\n      backgroundColor={Colors.classicTimer}\n    >\n      <View className=\"h-full items-center justify-center\">\n        <FinishedText visible={isFinished} fadeDuration={FadeDuration} />\n        <FadedView visible={!isFinished} fadeDuration={FadeDuration}>\n          <TimeText big>{timer}</TimeText>\n        </FadedView>\n        <BouncingText\n          visible={!isActive && !isPaused}\n          fadeDuration={FadeDuration}\n        >\n          Swipe up to add time, down to reduce\n        </BouncingText>\n        <BottomButtons\n          isActive={isActive}\n          isPaused={isPaused}\n          isFinished={isFinished}\n          handleReset={handleReset}\n          handleStart={handleStart}\n          handlePause={handlePause}\n          handleResume={handleResume}\n        />\n      </View>\n    </ScreenWrapper>\n  );\n}\n","import useTimer from './useTimer';\n\nexport default function useClassicTimer(initialState: number) {\n    const {\n        timer, setTimer,\n        isActive, isPaused, isFinished,\n        handleStart, handlePause, handleResume, handleReset, handleFinish\n    } = useTimer(initialState)\n\n    const upTimer = (eps = 1) => {\n        setTimer(t => {\n            if (eps < 60) {\n                const seconds = t % 60;\n                if (seconds == 59) return t\n                return t + eps;\n            }\n\n            if (t < 3599) {\n                if (t + eps < 3599)\n                    return t + eps;\n                return 3540 + t % 60\n            }\n            else return t\n        })\n    }\n\n    const downTimer = (eps = 1) => {\n        setTimer(t => {\n            if (eps < 60) {\n                const seconds = t % 60;\n                if (seconds == 0) return t\n                return t - eps;\n            }\n            if (t > 0) {\n                if (t - eps > 0)\n                    return t - eps;\n                return t % 60;\n            }\n            else return t\n        })\n    }\n\n    return {\n        timer,\n        isActive, isPaused, isFinished,\n        handleStart, handlePause, handleResume, handleReset, handleFinish,\n        upTimer, downTimer,\n    }\n}","import React from \"react\";\nimport { View } from \"../components/tailwind\";\nimport { RootStackScreenProps } from \"../types\";\nimport ScreenWrapper from \"../components/ScreenWrapper\";\nimport Colors from \"../constants/Colors\";\nimport useStopwatch from \"../hooks/useStopwatch\";\nimport TimeText from \"../components/TimeText\";\nimport BottomButtons from \"../components/BottomButtons\";\n\nexport default function StopwatchScreen({\n  navigation,\n}: RootStackScreenProps<\"Stopwatch\">) {\n  const {\n    timer,\n    isActive,\n    isPaused,\n    handleStart,\n    handlePause,\n    handleResume,\n    handleReset,\n  } = useStopwatch();\n\n  return (\n    <ScreenWrapper\n      title=\"Stopwatch\"\n      onPress={() => navigation.navigate(\"Home\")}\n      backgroundColor={Colors.stopwatch}\n    >\n      <View className=\"flex-1 items-center justify-center\">\n        <TimeText big>{timer}</TimeText>\n        <BottomButtons\n          isActive={isActive}\n          isPaused={isPaused}\n          handleReset={handleReset}\n          handleStart={handleStart}\n          handlePause={handlePause}\n          handleResume={handleResume}\n        />\n      </View>\n    </ScreenWrapper>\n  );\n}\n","/**\n * Credit for this hook goes to:\n * https://dev.to/abdulbasit313/how-to-develop-a-stopwatch-in-react-js-with-custom-hook-561b\n * I only ported the code to Typescript\n */\n\nimport { useState, useRef, useEffect } from 'react';\n\nexport default function useStopwatch() {\n    const [timer, setTimer] = useState(0)\n    const [isActive, setIsActive] = useState(false)\n    const [isPaused, setIsPaused] = useState(false)\n    /* To understand why useRef is written like this click the link below: \n    https://github.com/DefinitelyTyped/DefinitelyTyped/issues/31065#issuecomment-453841404 */\n    const countRef = useRef<NodeJS.Timer | null>(null)\n\n    const handleStart = () => {\n        setIsActive(true)\n        countRef.current = setInterval(() => {\n            setTimer((timer) => timer + 1)\n        }, 1000)\n    }\n\n    const handlePause = () => {\n        if (countRef.current) clearInterval(countRef.current)\n        setIsPaused(true)\n    }\n\n    const handleResume = () => {\n        setIsPaused(false)\n        countRef.current = setInterval(() => {\n            setTimer((timer) => timer + 1)\n        }, 1000)\n    }\n\n    const handleReset = () => {\n        if (countRef.current) clearInterval(countRef.current)\n        setIsActive(false)\n        setIsPaused(false)\n        setTimer(0)\n    }\n\n    const handleClear = () => {\n        if (countRef.current) clearInterval(countRef.current)\n    }\n\n    useEffect(() => {\n        // Prevents from memory leaks by stopping the 1 second interval\n        return () => {\n            handleClear();\n        };\n    }, []);\n\n    return { timer, isActive, isPaused, handleStart, handlePause, handleResume, handleReset, handleClear }\n}","import { useState, useEffect } from 'react';\nimport useTimer from './useTimer';\n\nexport default function useHiitTimer() {\n    const [restTime, setRestTime] = useState(30)\n    const [workTime, setWorkTime] = useState(30)\n    const [numberRounds, setNumberRounds] = useState(20)\n    const [roundTime, setRoundTime] = useState(restTime + workTime)\n    const [totalTime, setTotalTime] = useState(roundTime * numberRounds)\n    const { timer, isActive, isPaused, isFinished,\n        handleStart, handlePause, handleResume, handleReset: superReset, setTimer } = useTimer(totalTime)\n    const [round, setRound] = useState(1)\n    const [isRest, setIsRest] = useState(false)\n\n    const handleReset = () => {\n        superReset();\n        setRound(1)\n        setIsRest(false);\n    }\n\n    const handleNewRound = () => {\n        setIsRest(false)\n        setRound(round => round + 1)\n    }\n\n    useEffect(() => {\n        if (isActive && timer != 0) {\n            if ((totalTime - timer) == workTime * round + restTime * (round - 1) && restTime != 0)\n                setIsRest(true);\n\n            if (timer % roundTime == 0)\n                handleNewRound();\n        }\n    }, [timer]);\n\n    useEffect(() => {\n        setTotalTime((workTime + restTime) * numberRounds);\n        setTimer((workTime + restTime) * numberRounds)\n        setRoundTime(workTime + restTime)\n    }, [workTime, restTime, numberRounds]);\n\n    return {\n        totalTime, workTime, roundTime, restTime,\n        timer, round, numberRounds,\n        isActive, isPaused, isRest, isFinished,\n        handleStart, handlePause, handleResume, handleReset,\n        setNumberRounds, setRestTime, setWorkTime\n    }\n}","import React from \"react\";\nimport FontInter from \"../constants/FontInter\";\nimport { View, Text } from \"./tailwind\";\nimport TimeText from \"./TimeText\";\n\nexport default function TimerWithRoundsLowerPart({\n  timer,\n  totalTime,\n}: {\n  timer: number;\n  totalTime: number;\n}) {\n  return (\n    <View className=\"w-full\">\n      <View className=\"flex-row justify-between items-center\">\n        <Text\n          className=\"text-white text-xl\"\n          style={{\n            fontFamily: FontInter.semiBold,\n          }}\n        >\n          Time remaining\n        </Text>\n        <TimeText>{timer}</TimeText>\n      </View>\n      <View className=\"flex-row justify-between items-center\">\n        <Text\n          className=\"text-white text-xl\"\n          style={{\n            fontFamily: FontInter.semiBold,\n          }}\n        >\n          Time\n        </Text>\n        <TimeText>{totalTime - timer}</TimeText>\n      </View>\n    </View>\n  );\n}\n","import React from \"react\";\nimport { useWindowDimensions } from \"react-native\";\nimport FadeDuration from \"../constants/FadeDuration\";\nimport FontInter from \"../constants/FontInter\";\nimport FadedView from \"./FadedView\";\nimport { View, Text } from \"./tailwind\";\n\nexport default function TimerWithRoundsUpperPart({\n  isRest,\n  round,\n  numberRounds,\n}: {\n  isRest: boolean;\n  round: number;\n  numberRounds: number;\n}) {\n  const bottom = 20;\n  const { height: windowHeight, width: windowWidth } = useWindowDimensions();\n  const fontSize =\n    windowHeight * 0.1 > windowWidth * 0.16\n      ? windowWidth * 0.16\n      : windowHeight * 0.1;\n  return (\n    <View className=\"items-center\">\n      <FadedView\n        visible={!isRest}\n        style={{\n          position: \"absolute\",\n          bottom: bottom,\n        }}\n        fadeDuration={FadeDuration / 2}\n      >\n        <Text\n          className=\"text-white\"\n          style={{\n            fontFamily: FontInter.semiBold,\n            fontSize: fontSize,\n          }}\n        >\n          WORK\n        </Text>\n      </FadedView>\n      <FadedView\n        visible={isRest}\n        style={{\n          position: \"absolute\",\n          bottom: bottom,\n        }}\n        fadeDuration={FadeDuration / 2}\n      >\n        <Text\n          className=\"text-white\"\n          style={{\n            fontFamily: FontInter.semiBold,\n            fontSize: fontSize,\n          }}\n        >\n          REST\n        </Text>\n      </FadedView>\n      <Text\n        className=\"text-white text-xl\"\n        style={{\n          fontFamily: FontInter.semiBold,\n        }}\n      >\n        Round {round}/{numberRounds}\n      </Text>\n    </View>\n  );\n}\n","import React from \"react\";\nimport { useWindowDimensions } from \"react-native\";\nimport FadeDuration from \"../constants/FadeDuration\";\nimport { FadedView } from \"./tailwind\";\nimport TimerWithRoundsLowerPart from \"./TimerWithRoundsLowerPart\";\nimport TimerWithRoundsUpperPart from \"./TimerWithRoundsUpperPart\";\nimport TimeText from \"./TimeText\";\n\nexport default function TimerWithRounds({\n  visible,\n  timer,\n  totalTime,\n  isRest,\n  round,\n  numberRounds,\n  restTime,\n  workTime,\n  roundTime,\n}: {\n  timer: number;\n  totalTime: number;\n  visible: boolean;\n  isRest: boolean;\n  round: number;\n  numberRounds: number;\n  restTime: number;\n  workTime: number;\n  roundTime: number;\n}) {\n  const { width: windowWidth } = useWindowDimensions();\n  return (\n    <FadedView\n      visible={visible}\n      fadeDuration={FadeDuration}\n      className=\"max-w-xl\"\n      style={{\n        width: windowWidth * 0.8,\n        alignItems: \"center\",\n      }}\n    >\n      <TimerWithRoundsUpperPart\n        isRest={isRest}\n        round={round}\n        numberRounds={numberRounds}\n      />\n      <TimeText big>\n        {timer == 0\n          ? 0\n          : isRest\n          ? restTime - ((totalTime - timer) % restTime)\n          : workTime - ((totalTime - timer) % roundTime)}\n      </TimeText>\n      <TimerWithRoundsLowerPart timer={timer} totalTime={totalTime} />\n    </FadedView>\n  );\n}\n","import React from \"react\";\nimport FadeDuration from \"../constants/FadeDuration\";\nimport FontInter from \"../constants/FontInter\";\nimport { View, Text, FadedView } from \"./tailwind\";\nimport { Slider } from \"@miblanchard/react-native-slider\";\nimport TimeText from \"./TimeText\";\nimport { useWindowDimensions } from \"react-native\";\n\nexport default function RoundsSettings({\n  visible,\n  numberRounds,\n  workTime,\n  restTime,\n  setNumberRounds,\n  setRestTime,\n  setWorkTime,\n}: {\n  visible: boolean;\n  numberRounds: number;\n  workTime: number;\n  restTime: number;\n  setNumberRounds: React.Dispatch<React.SetStateAction<number>>;\n  setRestTime: React.Dispatch<React.SetStateAction<number>>;\n  setWorkTime: React.Dispatch<React.SetStateAction<number>>;\n}) {\n  const { width: windowWidth } = useWindowDimensions();\n  return (\n    <FadedView\n      visible={visible}\n      className=\"max-w-xl\"\n      style={{\n        width: windowWidth * 0.8,\n        alignItems: \"center\",\n        position: \"absolute\",\n      }}\n      fadeDuration={FadeDuration}\n      initialValue={0}\n    >\n      <View className=\"w-full\">\n        <View>\n          <View className=\"flex-row justify-between\">\n            <Text\n              className=\"text-white text-xl\"\n              style={{\n                fontFamily: FontInter.semiBold,\n              }}\n            >\n              Rounds\n            </Text>\n            <Text\n              className=\"text-white text-xl\"\n              style={{\n                fontFamily: FontInter.semiBold,\n              }}\n            >\n              {numberRounds}\n            </Text>\n          </View>\n          <Slider\n            value={numberRounds}\n            onValueChange={(value) => {\n              if (typeof value === \"number\") setNumberRounds(value);\n              else setNumberRounds(value[0]);\n            }}\n            maximumValue={60}\n            minimumValue={1}\n            step={1}\n          />\n        </View>\n        <View>\n          <View className=\"flex-row justify-between\">\n            <Text\n              className=\"text-white text-xl\"\n              style={{\n                fontFamily: FontInter.semiBold,\n              }}\n            >\n              Work period\n            </Text>\n            <TimeText>{workTime}</TimeText>\n          </View>\n          <Slider\n            value={workTime}\n            onValueChange={(value) => {\n              if (typeof value === \"number\") setWorkTime(value);\n              else setWorkTime(value[0]);\n            }}\n            maximumValue={120}\n            minimumValue={10}\n            step={1}\n          />\n        </View>\n        <View>\n          <View className=\"flex-row justify-between\">\n            <Text\n              className=\"text-white text-xl\"\n              style={{\n                fontFamily: FontInter.semiBold,\n              }}\n            >\n              Rest period\n            </Text>\n            <TimeText>{restTime}</TimeText>\n          </View>\n          <Slider\n            value={restTime}\n            onValueChange={(value) => {\n              if (typeof value === \"number\") setRestTime(value);\n              else setRestTime(value[0]);\n            }}\n            maximumValue={120}\n            minimumValue={0}\n            step={1}\n          />\n        </View>\n      </View>\n    </FadedView>\n  );\n}\n","import React, { useEffect, useRef, useState } from \"react\";\nimport {\n  PanResponder,\n  GestureResponderEvent,\n  PanResponderGestureState,\n} from \"react-native\";\nimport BouncingText from \"../components/BoucingText\";\nimport ScreenWrapper from \"../components/ScreenWrapper\";\nimport { View } from \"../components/tailwind\";\nimport Colors from \"../constants/Colors\";\nimport useHiitTimer from \"../hooks/useHiitTimer\";\nimport { RootStackScreenProps } from \"../types\";\nimport FinishedText from \"../components/FinishedText\";\nimport BottomButtons from \"../components/BottomButtons\";\nimport FadeDuration from \"../constants/FadeDuration\";\nimport TimerWithRounds from \"../components/TimerWithRounds\";\nimport RoundsSettings from \"../components/RoundsSettings\";\n\nexport default function HiitTimerScreen({\n  navigation,\n}: RootStackScreenProps<\"HiitTimer\">) {\n  const {\n    totalTime,\n    workTime,\n    roundTime,\n    restTime,\n    timer,\n    isActive,\n    isPaused,\n    round,\n    numberRounds,\n    isRest,\n    isFinished,\n    handleStart,\n    handlePause,\n    handleResume,\n    handleReset,\n    setNumberRounds,\n    setRestTime,\n    setWorkTime,\n  } = useHiitTimer();\n\n  const isActiveRef = useRef(isActive);\n\n  useEffect(() => {\n    isActiveRef.current = isActive;\n  }, [isActive]);\n\n  const [isSettingsShown, setIsSettingsShown] = useState(false);\n  const onScreenTap = () => {\n    if (!isActiveRef.current) setIsSettingsShown((v) => !v);\n  };\n\n  const onPanResponderRelease = (\n    event: GestureResponderEvent,\n    gestureState: PanResponderGestureState\n  ) => {\n    if (gestureState.dx == 0 && gestureState.dy == 0) onScreenTap();\n  };\n\n  const panResponder = useRef(\n    PanResponder.create({\n      onStartShouldSetPanResponder: () => true,\n      onPanResponderRelease: onPanResponderRelease,\n    })\n  ).current;\n\n  return (\n    <ScreenWrapper\n      title=\"HIIT Timer\"\n      onPress={() => navigation.navigate(\"Home\")}\n      backgroundColor={Colors.hiitTimer}\n    >\n      <View\n        className=\"h-full items-center justify-center\"\n        {...panResponder.panHandlers}\n      >\n        <TimerWithRounds\n          timer={timer}\n          totalTime={totalTime}\n          visible={!isFinished && !isSettingsShown}\n          isRest={isRest}\n          round={round}\n          numberRounds={numberRounds}\n          restTime={restTime}\n          workTime={workTime}\n          roundTime={roundTime}\n        />\n        <FinishedText visible={isFinished} fadeDuration={FadeDuration} />\n        <RoundsSettings\n          visible={!isFinished && isSettingsShown}\n          numberRounds={numberRounds}\n          workTime={workTime}\n          restTime={restTime}\n          setNumberRounds={setNumberRounds}\n          setRestTime={setRestTime}\n          setWorkTime={setWorkTime}\n        />\n        <BouncingText\n          visible={!isActive && !isPaused}\n          fadeDuration={FadeDuration}\n        >\n          Tap the screen to change the settings\n        </BouncingText>\n        <BottomButtons\n          isActive={isActive}\n          isPaused={isPaused}\n          isFinished={isFinished}\n          handleReset={handleReset}\n          handleStart={() => {\n            setIsSettingsShown(false);\n            handleStart();\n          }}\n          handlePause={handlePause}\n          handleResume={handleResume}\n        />\n      </View>\n    </ScreenWrapper>\n  );\n}\n","import { useState, useEffect } from 'react';\nimport useTimer from './useTimer';\n\nexport default function useTabataTimer() {\n    const restTime = 10;\n    const workTime = 20;\n    const numberRounds = 8;\n    const roundTime = restTime + workTime;\n    const totalTime = roundTime * numberRounds;\n    const { timer, isActive, isPaused, isFinished,\n        handleStart, handlePause, handleResume, handleReset: superReset } = useTimer(totalTime)\n    const [round, setRound] = useState(1)\n    const [isRest, setIsRest] = useState(false)\n\n    const handleReset = () => {\n        superReset();\n        setRound(1)\n        setIsRest(false);\n    }\n\n    const handleNewRound = () => {\n        setIsRest(false)\n        setRound(round => round + 1)\n    }\n\n    useEffect(() => {\n        if (isActive && timer != 0) {\n            if ((totalTime - timer) == workTime * round + restTime * (round - 1))\n                setIsRest(true);\n\n            if (timer % roundTime == 0)\n                handleNewRound();\n        }\n    }, [timer]);\n\n    return {\n        totalTime, workTime, roundTime, restTime,\n        timer, round, numberRounds,\n        isActive, isPaused, isRest, isFinished,\n        handleStart, handlePause, handleResume, handleReset\n    }\n}","import React from \"react\";\nimport ScreenWrapper from \"../components/ScreenWrapper\";\nimport Colors from \"../constants/Colors\";\nimport { RootStackScreenProps } from \"../types\";\nimport { View } from \"../components/tailwind\";\nimport useTabataTimer from \"../hooks/useTabataTimer\";\nimport FinishedText from \"../components/FinishedText\";\nimport FadeDuration from \"../constants/FadeDuration\";\nimport TimerWithRounds from \"../components/TimerWithRounds\";\nimport BottomButtons from \"../components/BottomButtons\";\n\nexport default function TabataTimerScreen({\n  navigation,\n}: RootStackScreenProps<\"TabataTimer\">) {\n  const {\n    totalTime,\n    workTime,\n    roundTime,\n    restTime,\n    numberRounds,\n    timer,\n    isActive,\n    isPaused,\n    round,\n    isRest,\n    isFinished,\n    handleStart,\n    handlePause,\n    handleResume,\n    handleReset,\n  } = useTabataTimer();\n\n  return (\n    <ScreenWrapper\n      title=\"Tabata Timer\"\n      onPress={() => navigation.navigate(\"Home\")}\n      backgroundColor={Colors.tabataTimer}\n    >\n      <View className=\"h-full items-center justify-center\">\n        <FinishedText visible={isFinished} fadeDuration={FadeDuration} />\n        <TimerWithRounds\n          timer={timer}\n          totalTime={totalTime}\n          visible={!isFinished}\n          isRest={isRest}\n          round={round}\n          numberRounds={numberRounds}\n          restTime={restTime}\n          workTime={workTime}\n          roundTime={roundTime}\n        />\n        <BottomButtons\n          isActive={isActive}\n          isPaused={isPaused}\n          isFinished={isFinished}\n          handleReset={handleReset}\n          handleStart={handleStart}\n          handlePause={handlePause}\n          handleResume={handleResume}\n        />\n      </View>\n    </ScreenWrapper>\n  );\n}\n","/**\n * If you are not familiar with React Navigation, refer to the \"Fundamentals\" guide:\n * https://reactnavigation.org/docs/getting-started\n *\n */\nimport React from \"react\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { StackNavigationOptions } from \"@react-navigation/stack\";\nimport { Easing, Platform } from \"react-native\";\nimport { createSharedElementStackNavigator } from \"react-navigation-shared-element\";\n\nimport { RootStackParamList } from \"../types\";\nimport LinkingConfiguration from \"./LinkingConfiguration\";\nimport {\n  ClassicTimerScreen,\n  HiitTimerScreen,\n  HomeScreen,\n  StopwatchScreen,\n  TabataTimerScreen,\n} from \"../screens\";\n\nexport default function Navigation() {\n  return (\n    <NavigationContainer linking={LinkingConfiguration}>\n      <RootNavigator />\n    </NavigationContainer>\n  );\n}\n\nconst Stack = createSharedElementStackNavigator<RootStackParamList>();\nconst options = (): StackNavigationOptions => ({\n  gestureEnabled: false,\n  transitionSpec: {\n    open: {\n      animation: \"timing\",\n      config: {\n        duration: 400,\n        easing: Easing.inOut(Easing.ease),\n      },\n    },\n    close: {\n      animation: \"timing\",\n      config: {\n        duration: 400,\n        easing: Easing.inOut(Easing.ease),\n      },\n    },\n  },\n  cardStyleInterpolator: ({\n    current: { progress },\n  }: {\n    current: {\n      progress: any;\n    };\n  }) => {\n    return {\n      cardStyle: {\n        opacity: progress,\n      },\n    };\n  },\n});\n\nfunction RootNavigator() {\n  return (\n    <Stack.Navigator\n      initialRouteName=\"Home\"\n      screenOptions={{\n        headerShown: false,\n      }}\n    >\n      <Stack.Screen name=\"Home\" component={HomeScreen} />\n      <Stack.Screen\n        name=\"Stopwatch\"\n        component={StopwatchScreen}\n        sharedElements={(route, otherRoute, showing) => {\n          if (Platform.OS === \"web\") {\n            return [];\n          }\n          return [{ id: \"Stopwatch.background\" }, { id: \"Stopwatch\" }];\n        }}\n        options={options}\n      />\n      <Stack.Screen\n        name=\"ClassicTimer\"\n        component={ClassicTimerScreen}\n        sharedElements={(route, otherRoute, showing) => {\n          if (Platform.OS === \"web\") {\n            return [];\n          }\n          return [{ id: \"Classic Timer.background\" }, { id: \"Classic Timer\" }];\n        }}\n        options={options}\n      />\n      <Stack.Screen\n        name=\"TabataTimer\"\n        component={TabataTimerScreen}\n        sharedElements={(route, otherRoute, showing) => {\n          if (Platform.OS === \"web\") {\n            return [];\n          }\n          return [{ id: \"Tabata Timer.background\" }, { id: \"Tabata Timer\" }];\n        }}\n        options={options}\n      />\n      <Stack.Screen\n        name=\"HiitTimer\"\n        component={HiitTimerScreen}\n        sharedElements={(route, otherRoute, showing) => {\n          if (Platform.OS === \"web\") {\n            return [];\n          }\n          return [{ id: \"HIIT Timer.background\" }, { id: \"HIIT Timer\" }];\n        }}\n        options={options}\n      />\n    </Stack.Navigator>\n  );\n}\n","import { StatusBar } from \"expo-status-bar\";\nimport React from \"react\";\nimport { SafeAreaProvider } from \"react-native-safe-area-context\";\nimport Navigation from \"./navigation\";\nimport useCachedResources from \"./hooks/useCachedResources\";\n\nexport default function App() {\n  const isLoadingComplete = useCachedResources();\n\n  if (!isLoadingComplete) {\n    return null;\n  } else {\n    return (\n      <SafeAreaProvider>\n        <Navigation />\n        <StatusBar />\n      </SafeAreaProvider>\n    );\n  }\n}\n","import { Inter_600SemiBold, Inter_900Black } from '@expo-google-fonts/inter';\nimport { useFonts } from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport { useEffect, useState } from 'react';\n\n// Load any resources or data that we need prior to rendering the app\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = useState(false);\n  SplashScreen.preventAutoHideAsync();\n\n  const [fontsLoaded, error] = useFonts({\n    Inter_900Black,\n    Inter_600SemiBold,\n  });\n\n  useEffect(() => {\n    if (fontsLoaded) {\n      setLoadingComplete(true)\n      SplashScreen.hideAsync();\n    } else if (error)\n      console.warn(error);\n  }, [fontsLoaded, error]);\n\n  return isLoadingComplete;\n}\n","export default {\n    thin: 'Inter_100Thin',\n    extraLight: 'Inter_200ExtraLight',\n    light: 'Inter_300Light',\n    regular: 'Inter_400Regular',\n    medium: 'Inter_500Medium',\n    semiBold: 'Inter_600SemiBold',\n    bold: 'Inter_700Bold',\n    extraBold: 'Inter_800ExtraBold',\n    black: 'Inter_900Black'\n}","import React, { useRef, useState } from \"react\";\nimport { Animated, StyleProp, ViewStyle } from \"react-native\";\nimport useFade from \"../hooks/useFade\";\nimport useUpdateEffect from \"../hooks/useUpdateEffect\";\n\nexport default function FadedView({\n  initialValue = 1,\n  visible,\n  style,\n  children,\n  fadeDuration,\n  fadeOutDuration,\n}: {\n  initialValue?: number;\n  visible: boolean;\n  style?: StyleProp<ViewStyle>;\n  children?: React.ReactNode;\n  fadeDuration: number;\n  fadeOutDuration?: number;\n}) {\n  const [showView, setShowView] = useState(visible);\n  const { fadeAnim, fadeIn, fadeOut } = useFade(initialValue, fadeDuration);\n  const timeoutRef = useRef<NodeJS.Timer | null>(null);\n\n  useUpdateEffect(() => {\n    fadeAnim.stopAnimation();\n    if (timeoutRef.current) clearTimeout(timeoutRef.current);\n    if (visible) {\n      setShowView(true);\n      fadeIn();\n    } else {\n      fadeOut();\n      timeoutRef.current = setTimeout(\n        () => setShowView(false),\n        fadeOutDuration ?? fadeDuration\n      );\n    }\n  }, [visible]);\n\n  return (\n    <Animated.View style={[{ opacity: fadeAnim }, style]}>\n      {showView && children}\n    </Animated.View>\n  );\n}\n","import { useRef, useEffect, EffectCallback, DependencyList } from \"react\";\n\n/**\n * A custom useEffect hook that only triggers on updates, not on initial mount\n * @param {Function} effect\n * @param {Array<any>} dependencies\n */\nexport default function useUpdateEffect(effect: EffectCallback, deps?: DependencyList) {\n    const isInitialMount = useRef(true);\n\n    useEffect(() => {\n        if (isInitialMount.current) isInitialMount.current = false;\n        else effect();\n    }, deps);\n}"],"sourceRoot":""}